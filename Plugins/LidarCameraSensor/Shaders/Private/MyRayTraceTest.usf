#include "/Engine/Private/Common.ush"
#include "/Engine/Private/RayTracing/RayTracingCommon.ush"
#include "/Engine/Private/RayTracing/RayTracingHitGroupCommon.ush"


RWTexture2D<float4> outTex;
RaytracingAccelerationStructure TLAS;

RAY_TRACING_ENTRY_RAYGEN(RayTraceTestRGS)
{
    // reconstruct camera direction with a small (far) device z
    uint2 PixelCoord = DispatchRaysIndex().xy + View.ViewRectMin.xy;
    float3 WorldPosition;
    float3 CameraDirection;
	ReconstructTranslatedWorldPositionAndCameraDirectionFromDeviceZ(PixelCoord, 0.1f, WorldPosition, CameraDirection);

	// setup ray, simply shoot a long distance
    RayDesc Ray;
	Ray.Origin = WorldPosition;
    Ray.Direction = CameraDirection;
    Ray.TMin = 0.0f;
    Ray.TMax = 9999;

	// consider opaque geometries and front facing triangles only
    uint RayFlags = RAY_FLAG_FORCE_OPAQUE | RAY_FLAG_CULL_BACK_FACING_TRIANGLES;

	// use material closest hit pay load
    FMinimalPayload Payload = (FMinimalPayload) 0;
	
	TraceRay(
    	TLAS,   // AccelerationStructure
    	RayFlags,
    	RAY_TRACING_MASK_OPAQUE,          // InstanceInclusionMask, defined by UE4
    	RAY_TRACING_SHADER_SLOT_MATERIAL, // RayContributionToHitGroupIndex, defined by UE4
    	RAY_TRACING_NUM_SHADER_SLOTS,     // MultiplierForGeometryContributionToShaderIndex, defined by UE4
    	0,      // MissShaderIndex
    	Ray,    // RayDesc
    	Payload // Payload
    );

	if (Payload.IsHit())
        outTex[PixelCoord] = 1.0f;
	else
		outTex[PixelCoord] = 0.0f;
}

[shader("miss")]
void RayTraceTestMS(inout FMinimalPayload data)
{
    data.SetMiss();
}

[shader("closesthit")]
void RayTraceTestCHS(inout FMinimalPayload data, BuiltInTriangleIntersectionAttributes attribs)
{
    data.HitT = 1.0f;
}